from base64 import b64decode
import json

from aspen import log, resources, Response

from gratipay import canonical_scheme, canonical_host
from gratipay.models.account_elsewhere import AccountElsewhere
from gratipay.models.participant import NeedConfirmation

[-----------------------------]

platform = getattr(website.platforms, path['platform'], None)
if platform is None:
    raise Response(404)

# Get the query id from the querystring
query_id = platform.get_query_id(qs)

# Check that we have a cookie that matches the query id (CSRF prevention)
cookie_name = (platform.name+'_'+query_id).encode('ascii')
try:
    cookie_value = request.headers.cookie[cookie_name].value
except KeyError:
    raise Response(400, 'Missing cookie')
if not cookie_value:
    raise Response(400, 'Empty cookie')
query_data, action, then, action_user_name = json.loads(b64decode(cookie_value))

# Finish the auth process, the returned session is ready to use
url = canonical_scheme+'://'+canonical_host+request.line.uri.raw
sess = platform.handle_auth_callback(url, query_id, query_data)

# Get the user's info from the platform's API and upsert it in the DB
account = AccountElsewhere.upsert(platform.get_user_self_info(sess))

if action_user_name and account.user_name != action_user_name:
    claimed_account = AccountElsewhere.upsert(platform.get_user_info(action_user_name))
    if not claimed_account.is_team:
        then = '/on/%s/%s/failure.html?action=%s'
        request.redirect(then % (platform.name, action_user_name, action))
    if not platform.is_team_admin(claimed_account.user_name, sess):
        then = '/on/%s/%s/failure.html?action=%s&team=true'
        request.redirect(then % (platform.name, action_user_name, action))
    account = claimed_account

log('%s user "%s" wants to %s' % (platform.name, account.user_id, action))

if action == 'opt-in':
    if platform not in website.signin_platforms or account.is_team:
        raise Response(400)
    suggested_username = account.user_name or (account.email or '').split('@')[0] or account.display_name
    user, newly_claimed = account.opt_in(suggested_username)
    user.sign_in(response.headers.cookie)

elif action == 'connect':
    if user.ANON:
        raise Response(403)
    try:
        user.participant.take_over((platform.name, account.user_id))
    except NeedConfirmation, obstacles:
        # XXX Eep! Internal redirect! Really?!
        # XXX In this case, we can get away with reusing the same dispatch_result. When upstreaming
        #     we should probably generalize by making a new DispatchResult.
        request.internally_redirected_from = dispatch_result.match
        request.resource = resources.get(website, website.www_root+'/on/confirm.html.spt')
        request.context.update(locals())
        raise request.resource.respond(request, dispatch_result)

elif action in {'lock', 'unlock'}:
    account.set_is_locked(action == 'lock')

else:
    raise Response(400)

response.set_cookie(cookie_name, '')
response.redirect(then)

[-----------------------------] text/plain
